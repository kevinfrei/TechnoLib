Gamepad
In TechnoLib, we have made gamepad integration even easier by abstracting out states like toggles, just pressed, etc. into boolean functions.
For use in integrating with command features, there also some functions to schedule commands with conditions:
public class SampleOpMode extends CommandOpMode{
     public Motor<DCMotor> motor;
     public CommandGamepad gamepad; //the command gamepad
     @Override
     public void uponInit(){
         motor = new Motor("motor");
         gamepad = driverGamepad; //already supplied by opmode
         // (ignore the instant command stuff, it is better to make a proper subsystem)
         gamepad.getButton(Buttons.A).whenPressed(new InstantCommand(()->motor.setSpeed(1))); //short way of scheduling a command to the button
         gamepad.a.whenReleased(new InstantCommand(()->motor.setSpeed(0))); //different way to set the motor to 0 when the button is just released
     }
 }

NOTE: For non-command users, use a different gamepad for less features (SimpleGamepad):
public class SampleOpMode extends OpMode{
    public SimpleGamepad gamepad; //the different gamepad
    public DCMotor motor;
    @Override
    public void init(){
        gamepad = new SimpleGamepad(gamepad1); //make the simplegamepad with gamepad1 (already made from opmode)
        motor = hardwareMap.get(DCMotor.class, "motor");
    }
    @Override
    public void loop(){
        if(gamepad.getButton(Buttons.A).isJustPressed()){ //is a on the gamepad just pressed
            motor.setPower(1);
        }else if(gamepad.a.isJustReleased()){ //is a on the gamepad just released (uses a different way of getting the gamepad button but works the same)
            motor.setPower(0);
        }
    }
}