Logging
In TechnoLib, we have a unique system to utilize telemetry's full potential while keeping the system easy to use and robust. This system is Annotation Logging.
Annotation logging allows you to send messages to the driver station without interfering with code flow and structure. Like you do with @Override and @Teleop, this logging annotates certain functions or devices, and can even be used to have a default logging function for custom classes and such. The supplied annotations include:
Annotations for logging stuff (all start with @Log)
@Log
@Log.Number
@Log.NumberSlider
@Log.NumberBar
@Log.Boolean
Annotations for configuring already logged stuff (all start with @LogConfig)
@LogConfig.Run
@LogConfig.WhiteList
@LogConfig.BlackList
@LogConfig.Disabled
We will go over the specifics later, but these are all the supplied annotations
Another thing to remember to add to any class with log functions is to implement Loggable, as it must be present for log annotations to work.

To Use these annotations, like any other annotation, you must annotate the object or field, not a class. Here is a sample class to show what you can annotate:
@Log //Wrong, you cant log Classes
public class Robot implements Loggable { //Implementing Loggable
    @Log //Right, you can log fields
    public double speed;
    @Log //Right, you can log some objects (will cover this later)
    public Motor motor;
    @Log //Wrong, you cannot log the constructor
    public Robot(){
         motor = new Motor();
    }
    @Log //Right, you can also log getter methods of supported types
    public double getAngle(){
        return motor.getPosition();
    }
}

FOR USERS WHO DONT WANT TO USE COMMANDOPMODE
Scheduling the logs to be run (if you are using built in CommandOpMode, ignore this part, as CommandOpMode handles log scheduling):
To make a Logger object, you instantiate it once and pass in the opmode (this).
In your init loop, run the logger object.initUpdate(), and in the run loop, run object.runUpdate():
for OpMode, its init_loop() and loop() respectively
for LinearOpMode, you have to make your own functions, which is not advised, but it works (Just use OpMode instead please).
Also, don't forget to extend Loggable with your OpMode.
here is how the OpMode should look with just a logger
public class SampleOpMode extends OpMode implements Loggable{
    public Logger logger;
    @Override
    public void init(){
        logger = new Logger(this);
    }
    @Override
    public void init_loop(){
        logger.initUpdate();
    }
    @Override
    public void loop(){
        logger.runUpdate();
    }
}



